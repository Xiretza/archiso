#
# DO NOT EDIT THIS FILE
#
# It is automatically generated by grub-mkconfig using templates
# from /etc/grub.d and settings from /etc/default/grub
#

### BEGIN /etc/grub.d/00_header ###
insmod part_gpt
insmod part_msdos
if [ -s $prefix/grubenv ]; then
  load_env
fi
if [ "${next_entry}" ] ; then
   set default="${next_entry}"
   set next_entry=
   save_env next_entry
   set boot_once=true
else
   set default="0"
fi

if [ x"${feature_menuentry_id}" = xy ]; then
  menuentry_id_option="--id"
else
  menuentry_id_option=""
fi

export menuentry_id_option

if [ "${prev_saved_entry}" ]; then
  set saved_entry="${prev_saved_entry}"
  save_env saved_entry
  set prev_saved_entry=
  save_env prev_saved_entry
  set boot_once=true
fi

function savedefault {
  if [ -z "${boot_once}" ]; then
    saved_entry="${chosen}"
    save_env saved_entry
  fi
}

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if loadfont unicode ; then
  set gfxmode=auto
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  set lang=en_US
  insmod gettext
fi
terminal_input console
terminal_output gfxterm
if [ x$feature_timeout_style = xy ] ; then
  set timeout_style=menu
  set timeout=5
# Fallback normal timeout code in case the timeout_style feature is
# unavailable.
else
  set timeout=5
fi
### END /etc/grub.d/00_header ###

set archiso_uuid="9BCE-B32C"
search --no-floppy --fs-uuid --set=archiso_partition "$archiso_uuid"
export archiso_partition
set archiso_location="/arch"
export archiso_location

set cmdline="archisobasedir=arch archisolabel=ARCH_201803"
export cmdline

if [ "${grub_platform}" == "efi" ]; then
	set bootmode="EFI-MBR"
else
	set bootmode="BIOS-MBR"
fi

export bootmode

set windows_uuid="4617-D0E9"

insmod search_fs_uuid

menuentry "Archiso x86_64 $bootmode" --class arch --class gnu-linux --class gnu --class os $menuentry_id_option 'archiso' {
	load_video
	set gfxpayload=keep
	insmod gzio
	insmod fat
	set root="$archiso_partition"
	echo    'Loading Linux ...'
	linux   "$archiso_location/boot/x86_64/vmlinuz" $cmdline
	echo    'Loading initial ramdisk ...'
	initrd  "$archiso_location/boot/intel_ucode.img" "$archiso_location/boot/x86_64/archiso.img"
}

submenu "Advanced archiso options" $menuentry_id_option 'archiso-advanced' {
	menuentry "Archiso x86_64 $bootmode, with peristent storage" --class arch --class gnu-linux --class gnu --class os $menuentry_id_option 'archiso-persistent' {
		load_video
		set gfxpayload=keep
		insmod gzio
		insmod fat
		set root="$archiso_partition"
		echo    'Loading Linux ...'
		linux   "$archiso_location/boot/x86_64/vmlinuz" $cmdline cow_label=ARCHISO_COW
		echo    'Loading initial ramdisk ...'
		initrd  "$archiso_location/boot/intel_ucode.img" "$archiso_location/boot/x86_64/archiso.img"
	}
	menuentry "Archiso x86_64 $bootmode, with copy-to-RAM" --class arch --class gnu-linux --class gnu --class os $menuentry_id_option 'archiso-copytoram' {
		load_video
		set gfxpayload=keep
		insmod gzio
		insmod fat
		set root="$archiso_partition"
		echo    'Loading Linux ...'
		linux   "$archiso_location/boot/x86_64/vmlinuz" $cmdline copytoram
		echo    'Loading initial ramdisk ...'
		initrd  "$archiso_location/boot/intel_ucode.img" "$archiso_location/boot/x86_64/archiso.img"
	}
}

if [ "${grub_platform}" == "efi" ]; then
	insmod chain

	menuentry "Windows repair, $bootmode" {
		insmod ntfs
		search --fs-uuid --set=root "$windows_uuid"
		chainloader /efi/boot/windows.efi
	}

	menuentry "Memtest" {
		chainloader /EFI/memtest.efi 
	}

	menuentry "UEFI Shell v1" {
		chainloader /EFI/shellx64_v1.efi
	}

	menuentry "UEFI Shell v2" {
		chainloader /EFI/shellx64_v2.efi
	}

	menuentry "Reboot to firmware interface" {
		fwsetup
	}
elif [ "${grub_platform}" == "pc" ]; then
	menuentry "Windows repair, $bootmode" {
		insmod ntfs
		insmod ntldr
		search --fs-uuid --set=root "$windows_uuid"
		ntldr /bootmgr
	}
	
	menuentry "Memtest" {
		set root="$archiso_partition"
		linux16 "$archiso_location/boot/memtest"
	}

	menuentry "Boot to stock syslinux" {
		insmod chain
		search --no-floppy --fs-uuid --set=root "$archiso_uuid"
		chainloader +1
	}
else
	echo "Unsupported boot mode: ${grub_platform}"
fi

menuentry "Shutdown" {
	halt
}

menuentry "Reboot" {
	reboot
}
